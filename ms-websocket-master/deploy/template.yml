kind: Template
apiVersion: v1
objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ms-websocket
      labels:
        app: ms-websocket
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
      triggers:
        -
          type: ConfigChange
        -
          type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ms-websocket
            from:
              kind: ImageStreamTag
              namespace: '${namespace}'
              name: 'ms-websocket:${version}'
      replicas: 2
      test: false
      selector:
        app: ms-websocket
        deploymentconfig: ms-websocket
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ms-websocket
            deploymentconfig: ms-websocket
        spec:
          containers:
            - env:
              - name: MONGODB_USERNAME
                valueFrom:
                  secretKeyRef:
                    key: MONGODB_USERNAME
                    name: cakra-secret
              - name: MONGODB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: MONGODB_PASSWORD
                    name: cakra-secret
              - name: MONGODB_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: MONGODB_DATABASE
                    name: cakra-secret
              - name: SMTP_AUTH_USER
                valueFrom:
                  secretKeyRef:
                    key: SMTP_AUTH_USER
                    name: cakra-secret
              - name: SMTP_AUTH_PWD
                valueFrom:
                  secretKeyRef:
                    key: SMTP_AUTH_PWD
                    name: cakra-secret
              name: ms-websocket
              image: '${namespace}/ms-websocket:${version}'
              ports:
                -
                  containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  cpu: 400m
                  memory: 768Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              readinessProbe:
                httpGet:
                  path: '/healthcheck'
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 120
                timeoutSeconds: 3
                periodSeconds: 20
                successThreshold: 1
                failureThreshold: 10
              livenessProbe:
                httpGet:
                  path: '/healthcheck'
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 120
                timeoutSeconds: 3
                periodSeconds: 20
                successThreshold: 1
                failureThreshold: 10
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext:
            supplementalGroups:
              - 1100
  - kind: Service
    apiVersion: v1
    metadata:
      name: ms-websocket
      labels:
        app: ms-websocket
    spec:
      ports:
        -
          name: 8080-tcp
          protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        app: ms-websocket
        deploymentconfig: ms-websocket                 
  - kind: Route
    apiVersion: v1
    metadata:
      name: ms-websocket
      labels:
        app: ms-websocket
    spec:
      host: 'ms-websocket-${namespace}.${domain}'
      to:
        kind: Service
        name: ms-websocket
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Allow
        wildcardPolicy: None
parameters:
  - name: domain
    displayName: app domain
    value: ''
    required: true
  - name: namespace
    displayName: openshift docker registry namespace
    value: ''
    required: true
  - name: version
    displayName: version app
    value: ''
    required: true